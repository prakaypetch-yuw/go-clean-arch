// Code generated by MockGen. DO NOT EDIT.
// Source: ./token.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "github.com/golang/mock/gomock"
	model "github.com/prakaypetch-yuw/go-clean-arch/internal/domain/model"
)

// MockTokenUseCase is a mock of TokenUseCase interface.
type MockTokenUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTokenUseCaseMockRecorder
}

// MockTokenUseCaseMockRecorder is the mock recorder for MockTokenUseCase.
type MockTokenUseCaseMockRecorder struct {
	mock *MockTokenUseCase
}

// NewMockTokenUseCase creates a new mock instance.
func NewMockTokenUseCase(ctrl *gomock.Controller) *MockTokenUseCase {
	mock := &MockTokenUseCase{ctrl: ctrl}
	mock.recorder = &MockTokenUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenUseCase) EXPECT() *MockTokenUseCaseMockRecorder {
	return m.recorder
}

// NewAccessToken mocks base method.
func (m *MockTokenUseCase) NewAccessToken(claims model.UserClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccessToken", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAccessToken indicates an expected call of NewAccessToken.
func (mr *MockTokenUseCaseMockRecorder) NewAccessToken(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccessToken", reflect.TypeOf((*MockTokenUseCase)(nil).NewAccessToken), claims)
}

// NewRefreshToken mocks base method.
func (m *MockTokenUseCase) NewRefreshToken(claims jwt.RegisteredClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRefreshToken", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRefreshToken indicates an expected call of NewRefreshToken.
func (mr *MockTokenUseCaseMockRecorder) NewRefreshToken(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRefreshToken", reflect.TypeOf((*MockTokenUseCase)(nil).NewRefreshToken), claims)
}

// NewToken mocks base method.
func (m *MockTokenUseCase) NewToken(id uint, email string) (*model.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", id, email)
	ret0, _ := ret[0].(*model.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockTokenUseCaseMockRecorder) NewToken(id, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockTokenUseCase)(nil).NewToken), id, email)
}

// ParseAccessToken mocks base method.
func (m *MockTokenUseCase) ParseAccessToken(accessToken string) (*model.UserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAccessToken", accessToken)
	ret0, _ := ret[0].(*model.UserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAccessToken indicates an expected call of ParseAccessToken.
func (mr *MockTokenUseCaseMockRecorder) ParseAccessToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAccessToken", reflect.TypeOf((*MockTokenUseCase)(nil).ParseAccessToken), accessToken)
}

// ParseRefreshToken mocks base method.
func (m *MockTokenUseCase) ParseRefreshToken(refreshToken string) *jwt.RegisteredClaims {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRefreshToken", refreshToken)
	ret0, _ := ret[0].(*jwt.RegisteredClaims)
	return ret0
}

// ParseRefreshToken indicates an expected call of ParseRefreshToken.
func (mr *MockTokenUseCaseMockRecorder) ParseRefreshToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRefreshToken", reflect.TypeOf((*MockTokenUseCase)(nil).ParseRefreshToken), refreshToken)
}
