// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/prakaypetch-yuw/go-clean-arch/config"
	"github.com/prakaypetch-yuw/go-clean-arch/internal/domain/repository"
	"github.com/prakaypetch-yuw/go-clean-arch/internal/handler"
	"github.com/prakaypetch-yuw/go-clean-arch/internal/infrastructure/db"
	"github.com/prakaypetch-yuw/go-clean-arch/internal/infrastructure/middleware"
	"github.com/prakaypetch-yuw/go-clean-arch/internal/infrastructure/server"
	"github.com/prakaypetch-yuw/go-clean-arch/internal/usecase"
)

// Injectors from wire.go:

func InitializeApplication(configPath config.FilePath) (*Application, func(), error) {
	configConfig, err := config.ProvideConfig(configPath)
	if err != nil {
		return nil, nil, err
	}
	gormDB, cleanup, err := db.ProvideDB(configConfig)
	if err != nil {
		return nil, nil, err
	}
	userRepository := repository.ProvideUserRepository(gormDB)
	userUseCase := usecase.ProvideUserUseCase(userRepository)
	tokenUseCase := usecase.ProvideTokenUseCase(configConfig)
	userHandler := handler.ProvideUserHandler(userUseCase, tokenUseCase)
	handlerProvider := handler.ProvideHandlerProvider(userHandler)
	jwtAuthMiddleware := middleware.ProvideJWTAuthMiddleware(tokenUseCase)
	middlewareProvider := middleware.ProvideMiddlewareProvider(jwtAuthMiddleware)
	app := server.ProvideFiberServer(handlerProvider, middlewareProvider)
	application := &Application{
		Cfg:    configConfig,
		Server: app,
	}
	return application, func() {
		cleanup()
	}, nil
}
